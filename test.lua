task.spawn(function()
    while true do
        wait()
        pcall(function()
            if shared.Loader == "Called from panda" then
                
            else
                game.Players.LocalPlayer:Destroy()
                wait(0.5)
                while true do end
            end
        end)
    end
end)

local Library = loadstring(game:HttpGet("https://gist.githubusercontent.com/skyDevO01/f82a59ead466d247a81ad9ab33493d8d/raw/ce477777da1c811943f26dd6f8d4d28a424dc985/LinoriaLib_ui_lib.Lua"))()
local SaveManager = loadstring(game:HttpGet("https://gist.githubusercontent.com/skyDevO01/48a4c04d70fd1f60a31afae97a807db3/raw/31c596842d8b93b1ad60cf58aedff34c932b37dd/SaveManager.Lua"))()
local ThemeManager = loadstring(game:HttpGet("https://gist.githubusercontent.com/skyDevO01/bca3c7d7b1a0bfd9e48490e53627ce66/raw/3699eee315564e849fa9f36d3340ceb6b390c8c7/Theme%2520Manager.lua"))()

local Window = Library:CreateWindow({
    Title = 'Ninja Legend 🥷',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local plr = game:GetService("Players").LocalPlayer
local backpack = plr.Backpack
local char = plr.Character or plr.CharacterAdded:Wait()
local root = char:FindFirstChild("HumanoidRootPart")
local sell = workspace.sellAreaCircles.sellAreaCircle.circleInner
local rs = game:GetService("RunService")
local coins = plr:FindFirstChild("Coins")

plr.CharacterAdded:Connect(function(newChar)
    char = newChar
	root = newChar:WaitForChild("HumanoidRootPart")
end)

local script = {
    cfg = {
        ["Auto Swing"] = false,
        ["Fast Swing"] = false,
        ["Auto Sell"] = false,
        ["X35 Sell"] = false,
        ["Auto Collect Chests"] = false,
        ["Auto Hoop"] = false,
        ["Auto Buy Swords"] = false,
        ["Auto Buy Belts"] = false,
        ["Auto Buy Shurikens"] = false,
        ["Auto Buy Skills"] = false,
        ["Auto Buy Ranks"] = false,
        ["Inf Jumps"] = false
    },
    functions = {
        autoswing = function()
            pcall(function()
                for i,v in next, backpack:GetChildren() do
                    if v:IsA("Tool") and v:FindFirstChild("attackTime") and not v:FindFirstChild("ammo") then
                        v.Parent = char
                    end
                end
            end)
            if char:FindFirstChildOfClass("Tool") and char:FindFirstChild("Humanoid"):GetState() ~= "Enum.HumanoidStateType.Dead" then
                char:FindFirstChildOfClass("Tool"):Activate()
            end
        end,
        autoswingRemote = function()
            game:GetService("Players").LocalPlayer:WaitForChild("ninjaEvent"):FireServer("swingKatana")
        end,
        autosell = function()
            local suc, fail = pcall(function()
                if root then
                    if sell then
                        firetouchinterest(root, sell, 0)
                        rs.Stepped:Wait()
                        firetouchinterest(root, sell, 1)
                    end
                end
            end)
        end,
        autosellX35 = function()
            if root then
                local fsdnfsjkfs = workspace.sellAreaCircles
                for i,v in next, fsdnfsjkfs:GetChildren() do
                    if v:IsA("Model") and v:FindFirstChild("sellMultiplier") then
                        local sellx = v:FindFirstChild("sellMultiplier")
                        if sellx.Value == 35 then
                            firetouchinterest(root, v.circleInner, 0)
                            rs.Stepped:Wait()
                            firetouchinterest(root, v.circleInner, 1)
                        end
                    end
                end
            end
        end,
        autohoop = function()
            local hoops = workspace:FindFirstChild("Hoops")
            if not hoops then return end
            for _, v in ipairs(hoops:GetChildren()) do
                if v:IsA("MeshPart") and v:FindFirstChildOfClass("Part") then
                    local part = v:FindFirstChildOfClass("Part")
                    local collingDown = v:FindFirstChild("coolingDown")
                    if root and part and not collingDown then
                        root.CFrame = part.CFrame
                    end
                end
            end
        end,
        autobuyswords = function()
            local swords = game:GetService("ReplicatedStorage").Weapons
            for i,v in next, swords:GetChildren() do
                if v:IsA("Folder") then
                    local args = {
                        "buyAllSwords",
                        v.Name
                    }
                    game:GetService("Players").LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                end
            end
        end,
        autobuybelts = function()
            local belts = game:GetService("ReplicatedStorage").Weapons
            for i,v in next, belts:GetChildren() do
                if v:IsA("Folder") then
                    local args = {
                        "buyAllBelts",
                        v.Name
                    }
                    game:GetService("Players").LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                end
            end
        end,
        Unlockallislands = function()
            local lands = workspace.islandUnlockParts
            for i,v in next, lands:GetChildren() do
                if v:IsA("MeshPart") and v:FindFirstChild("TouchInterest") then
                    firetouchinterest(root, v, 0)
                    wait(0.1)
                    firetouchinterest(root, v, 1)
                end
            end
        end,
        CollectChests = function()
            if root then
                for i,v in next, workspace:GetChildren() do 
                    if v:IsA("Model") and v.Name:find("Chest") then
                        firetouchinterest(root, v.circleInner, 0)
                        wait(0.1)
                        firetouchinterest(root, v.circleInner, 1)
                    end
                end
            end
        end,
        autobuyShurikens = function()
            local Shurikens = game:GetService("ReplicatedStorage").Shurikens
            for i,v in next, Shurikens:GetChildren() do
                if v:IsA("Folder") then
                    local args = {
                        "buyAllShurikens",
                        v.Name
                    }
                    game:GetService("Players").LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                end
            end
        end,
        autobuySkills = function()
            local skills = game:GetService("ReplicatedStorage").Skills
            for i,v in next, skills:GetChildren() do
                if v:IsA("Folder") then
                    local args = {
                        "buyAllSkills",
                        v.Name
                    }
                    game:GetService("Players").LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                end
            end
        end,
        autobuyRanks = function()
            local Ranks = game:GetService("ReplicatedStorage").Ranks

            local ownedRanks = plr:FindFirstChild("ownedRanks")
            if not ownedRanks then
                ownedRanks = Instance.new("Folder")
                ownedRanks.Name = "ownedRanks"
                ownedRanks.Parent = plr
            end

            for i,v in next, Ranks:GetDescendants() do
                if v:IsA("IntValue") then
                    if not v:IsDescendantOf(ownedRanks) then
                        local args = {
                            "buyRank",
                            v.Name
                        }
                        game:GetService("Players").LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                    end
                end
            end
        end
    },
    connections,
    timers = {
        buyswordtimer = 0,
        buybeltstimer = 0,
        buyShurikenstimer = 0,
        buySkillstimer = 0,
        buyRankstimer = 0,
        autoswingRemotetimer = 0
    }
}

local _G = script.cfg
local oldfastswing
local oldjumpindex

oldjumpindex = hookmetamethod(game, '__index', function(self, key)
    if _G["Inf Jumps"] and not checkcaller() and self == plr:FindFirstChild('multiJumpCount') and key == "Value" then
        return math.huge
    end
    return oldjumpindex(self, key)
end)

oldfastswing = hookmetamethod(game, '__index', function(self, key)
    if _G["Fast Swing"] and tostring(self) == "attackTime" and key == "Value" then
        return 0.000005
    end
    return oldfastswing(self,key)
end)

local Tabs = {
    Main = Window:AddTab('Main'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

local Sections = {
    MainLeft = Tabs.Main:AddLeftGroupbox('Farming'),
    MainRight = Tabs.Main:AddRightGroupbox("Shop"),
    MainLeft2 = Tabs.Main:AddLeftGroupbox('Islands'),
    MainRight2 = Tabs.Main:AddLeftGroupbox('LocalPlayer')
}

--// Main Farming Left \\--
Sections.MainLeft:AddToggle('Autoswing', {
    Text = 'Auto Swing',
    Default = false,
    Tooltip = 'Automatically Swing Swrod',
})

Sections.MainLeft:AddToggle('Fastswing', {
    Text = 'Fast Swing',
    Default = false,
    Tooltip = 'Make your sword swing faster + You will get faster ninjitsu',
})

Sections.MainLeft:AddToggle('AutoSell', {
    Text = 'Auto Sell',
    Default = false,
    Tooltip = 'Automatically Sell',
})

Sections.MainLeft:AddToggle('X35sell', {
    Text = 'X35 Sell',
    Default = false,
    Tooltip = 'Sell * 35',
})

Sections.MainLeft:AddToggle('AutoChests', {
    Text = 'Auto Collect Chests',
    Default = false,
    Tooltip = 'Automatically Collect Chests',
})

Sections.MainLeft:AddToggle('AutoHoops', {
    Text = 'Auto Hoops',
    Default = false,
    Tooltip = 'Automatically hoops',
})
--// Ends Of Farming \\--

--// Main Shop Right \\--
Sections.MainRight:AddToggle('Autobuyswords', {
    Text = 'Auto Buy Swords',
    Default = false,
    Tooltip = 'Automatically Buy All Swords',
})
Sections.MainRight:AddToggle('Autobuybelts', {
    Text = 'Auto Buy Belts',
    Default = false,
    Tooltip = 'Automatically Buy All Belts',
})
Sections.MainRight:AddToggle('AutobuyShurikens', {
    Text = 'Auto Buy Shurikens',
    Default = false,
    Tooltip = 'Automatically Buy All Shurikens',
})
Sections.MainRight:AddToggle('AutobuySkills', {
    Text = 'Auto Buy Skills',
    Default = false,
    Tooltip = 'Automatically Buy All Skills',
})
Sections.MainRight:AddToggle('Autobuyranks', {
    Text = 'Auto Buy Ranks',
    Default = false,
    Tooltip = 'Automatically Buy All Ranks',
})
--// Ends Of Shop Right \\--
--// Islands \\--

local Unlockallislands = Sections.MainLeft2:AddButton('Unlock All Islands', function()
    script.functions.Unlockallislands()
end)

--// Ends of Islands \\--

--// LocalPlayer \\--
Sections.MainRight2:AddToggle('InfJumps', {
    Text = 'Inf Double Jumps',
    Default = false,
    Tooltip = 'infinity double jumps',
})
--// Ends of LocalPlayer \\--

--// Callback Toggles, OnChanged \\--
--// Farming Callbacks \\--
Toggles.Autoswing:OnChanged(function()
    _G["Auto Swing"] = Toggles.Autoswing.Value
end)

Toggles.Fastswing:OnChanged(function()
    _G["Fast Swing"] = Toggles.Fastswing.Value
end)

Toggles.AutoSell:OnChanged(function()
    _G["Auto Sell"] = Toggles.AutoSell.Value
end)

Toggles.X35sell:OnChanged(function()
    _G["X35 Sell"] = Toggles.X35sell.Value
end)

Toggles.AutoChests:OnChanged(function()
    _G["Auto Collect Chests"] = Toggles.AutoChests.Value
end)

Toggles.AutoHoops:OnChanged(function()
    _G["Auto Hoop"] = Toggles.AutoHoops.Value
end)
--// Ends of Farming Callbacks \\--

--// Shop Callbacks \\--
Toggles.Autobuyswords:OnChanged(function()
    _G["Auto Buy Swords"] = Toggles.Autobuyswords.Value
end)

Toggles.Autobuybelts:OnChanged(function()
    _G["Auto Buy Belts"] = Toggles.Autobuybelts.Value
end)
Toggles.AutobuyShurikens:OnChanged(function()
    _G["Auto Buy Shurikens"] = Toggles.AutobuyShurikens.Value
end)

Toggles.AutobuySkills:OnChanged(function()
    _G["Auto Buy Skills"] = Toggles.AutobuySkills.Value
end)
Toggles.Autobuyranks:OnChanged(function()
    _G["Auto Buy Ranks"] = Toggles.Autobuyranks.Value
end)
--// Ends of Shop Callbacks \\--

--// LocalPlayer Callbacks \\--
Toggles.InfJumps:OnChanged(function()
    _G["Inf Jumps"] = Toggles.InfJumps.Value
end)
--// Ends of LocalPlayer Callbacks \\--
--// Ends of Callback Toggles, OnChanged \\--

--// Main Loop \\--
script.connections = rs.Stepped:Connect(function()
    if _G["Auto Swing"] then
        script.functions.autoswing()
        if tick() - script.timers.autoswingRemotetimer > 0.5 then
            script.functions.autoswingRemote()
            script.timers.autoswingRemotetimer = tick()
        end
    end
    if _G["Auto Sell"] then
        if not _G["X35 Sell"] then
            script.functions.autosell()
        end
        if _G["X35 Sell"] then
            script.functions.autosellX35()
        end
    end
    if _G["Auto Collect Chests"] then
        script.functions.CollectChests()
    end
    if _G["Auto Hoop"] then
        script.functions.autohoop()
    end
    if _G["Auto Buy Swords"] then
        if tick() - script.timers.buyswordtimer > 1 then
            script.functions.autobuyswords()
            script.timers.buyswordtimer = tick()
        end
    end
    if _G["Auto Buy Belts"] then
        if tick() - script.timers.buybeltstimer > 1 then
            script.functions.autobuybelts()
            script.timers.buybeltstimer = tick()
        end
    end
        if _G["Auto Buy Shurikens"] then
        if tick() - script.timers.buyShurikenstimer > 1 then
            script.functions.autobuyShurikens()
            script.timers.buyShurikenstimer = tick()
        end
    end
    if _G["Auto Buy Skills"] then
        if tick() - script.timers.buySkillstimer > 1 then
            script.functions.autobuySkills()
            script.timers.buySkillstimer = tick()
        end
    end
    if _G["Auto Buy Ranks"] then
        if tick() - script.timers.buyRankstimer > 1 then
            script.functions.autobuyRanks()
            script.timers.buyRankstimer = tick()
        end
    end
end)
--// Ends of Main Loop \\--

Library:SetWatermarkVisibility(true)

local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Library:SetWatermark(('Ninja Legend 🥷 | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);

Library.KeybindFrame.Visible = false;

function cleanTable(t)
    for k, v in pairs(t) do
        if type(v) == "boolean" then
            t[k] = nil
        elseif type(v) == "string" then
            t[k] = nil
        elseif type(v) == "number" then
            t[k] = 0
        elseif type(v) == "table" then
            cleanTable(v)
        end
    end
end

Library:OnUnload(function()
    WatermarkConnection:Disconnect()
    cleanTable(script)
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'V', NoUI = true, Text = 'Menu keybind' })
Library.ToggleKeybind = Options.MenuKeybind
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()

script.connections = rs.Stepped:Connect(function()
    local dex = game:GetService("CoreGui").RobloxGui:FindFirstChild("ExplorerSelections")
    if dex then
        game.Players.LocalPlayer:Destroy()
        wait(0.5)
        while true do end
    else
    end
end)
