-- Simple Roblox GUI Library
-- Load with: local ui = loadstring(game:HttpGet("your_url_here"))()
-- Usage: local window = ui:CreateWindow("My GUI")
-- window:AddToggle("Toggle Example", function(value) print(value) end)
-- window:AddButton("Button Example", function() print("Clicked") end)
-- window:AddSlider("Slider Example", 0, 100, 50, function(value) print(value) end)
-- window:AddDropdown("Dropdown Example", {"Option1", "Option2"}, function(selected) print(selected) end)

local Library = {}
Library.__index = Library

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

function Library:CreateWindow(title)
    local self = setmetatable({}, Library)
    
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "SimpleGUILib"
    self.ScreenGui.Parent = PlayerGui
    self.ScreenGui.ResetOnSpawn = false
    
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Size = UDim2.new(0, 300, 0, 400)
    self.MainFrame.Position = UDim2.new(0.5, -150, 0.5, -200)
    self.MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.Parent = self.ScreenGui
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(1, 0, 0, 30)
    TitleLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    TitleLabel.Text = title or "GUI"
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 18
    TitleLabel.Font = Enum.Font.SourceSansBold
    TitleLabel.Parent = self.MainFrame
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)
    UIListLayout.Parent = self.MainFrame
    
    self.ElementsContainer = Instance.new("ScrollingFrame")
    self.ElementsContainer.Size = UDim2.new(1, 0, 1, -30)
    self.ElementsContainer.BackgroundTransparency = 1
    self.ElementsContainer.BorderSizePixel = 0
    self.ElementsContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    self.ElementsContainer.ScrollBarThickness = 6
    self.ElementsContainer.Parent = self.MainFrame
    
    local ElementsListLayout = Instance.new("UIListLayout")
    ElementsListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ElementsListLayout.Padding = UDim.new(0, 5)
    ElementsListLayout.Parent = self.ElementsContainer
    
    ElementsListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.ElementsContainer.CanvasSize = UDim2.new(0, 0, 0, ElementsListLayout.AbsoluteContentSize.Y + 10)
    end)
    
    -- Make draggable
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        self.MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    TitleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    TitleLabel.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    return self
end

function Library:AddToggle(label, callback)
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
    ToggleFrame.BackgroundTransparency = 1
    ToggleFrame.Parent = self.ElementsContainer
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.8, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = label or "Toggle"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 14
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = ToggleFrame
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0, 20, 0, 20)
    ToggleButton.Position = UDim2.new(1, -25, 0.5, -10)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    ToggleButton.Text = ""
    ToggleButton.Parent = ToggleFrame
    
    local value = false
    ToggleButton.MouseButton1Click:Connect(function()
        value = not value
        ToggleButton.BackgroundColor3 = value and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(50, 50, 50)
        if callback then callback(value) end
    end)
end

function Library:AddButton(label, callback)
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, 0, 0, 30)
    Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    Button.Text = label or "Button"
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.TextSize = 14
    Button.Font = Enum.Font.SourceSans
    Button.Parent = self.ElementsContainer
    
    Button.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)
end

function Library:AddSlider(label, min, max, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, 0, 0, 40)
    SliderFrame.BackgroundTransparency = 1
    SliderFrame.Parent = self.ElementsContainer
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 0, 20)
    Label.BackgroundTransparency = 1
    Label.Text = label or "Slider"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 14
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = SliderFrame
    
    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, 0, 0, 10)
    SliderBar.Position = UDim2.new(0, 0, 0, 25)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SliderBar.Parent = SliderFrame
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Size = UDim2.new(0, 0, 1, 0)
    SliderFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    SliderFill.Parent = SliderBar
    
    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Size = UDim2.new(0, 50, 1, 0)
    ValueLabel.Position = UDim2.new(1, 0, 0, 0)
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValueLabel.TextSize = 14
    ValueLabel.Parent = SliderBar
    
    local value = default or min
    ValueLabel.Text = tostring(value)
    
    local dragging = false
    SliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    SliderBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativePos = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
            value = math.floor(min + (max - min) * relativePos)
            SliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
            ValueLabel.Text = tostring(value)
            if callback then callback(value) end
        end
    end)
    
    -- Set default
    local defaultPos = (default - min) / (max - min)
    SliderFill.Size = UDim2.new(defaultPos, 0, 1, 0)
end

function Library:AddDropdown(label, options, callback)
    local DropdownFrame = Instance.new("Frame")
    DropdownFrame.Size = UDim2.new(1, 0, 0, 30)
    DropdownFrame.BackgroundTransparency = 1
    DropdownFrame.Parent = self.ElementsContainer
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = label or "Dropdown"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 14
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = DropdownFrame
    
    local Selected = Instance.new("TextLabel")
    Selected.Size = UDim2.new(0, 100, 1, 0)
    Selected.Position = UDim2.new(1, -105, 0, 0)
    Selected.BackgroundTransparency = 1
    Selected.Text = options[1] or "Select"
    Selected.TextColor3 = Color3.fromRGB(255, 255, 255)
    Selected.TextSize = 14
    Selected.Parent = DropdownFrame
    
    local DropButton = Instance.new("TextButton")
    DropButton.Size = UDim2.new(1, 0, 1, 0)
    DropButton.BackgroundTransparency = 1
    DropButton.Text = ""
    DropButton.Parent = DropdownFrame
    
    local OptionsFrame = Instance.new("Frame")
    OptionsFrame.Size = UDim2.new(1, 0, 0, #options * 25)
    OptionsFrame.Position = UDim2.new(0, 0, 1, 0)
    OptionsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    OptionsFrame.Visible = false
    OptionsFrame.Parent = DropdownFrame
    
    local OptionsList = Instance.new("UIListLayout")
    OptionsList.SortOrder = Enum.SortOrder.LayoutOrder
    OptionsList.Parent = OptionsFrame
    
    DropButton.MouseButton1Click:Connect(function()
        OptionsFrame.Visible = not OptionsFrame.Visible
    end)
    
    for _, option in ipairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Size = UDim2.new(1, 0, 0, 25)
        OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        OptionButton.Text = option
        OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        OptionButton.TextSize = 14
        OptionButton.Parent = OptionsFrame
        
        OptionButton.MouseButton1Click:Connect(function()
            Selected.Text = option
            OptionsFrame.Visible = false
            if callback then callback(option) end
        end)
    end
end

return Library
