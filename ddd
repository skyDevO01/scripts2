--[[
    Enhanced GUI Library with Tabs Example Usage:
    local ui = loadstring(game:HttpGet("URL_TO_THIS_SCRIPT"))()
    local window = ui:CreateWindow("My Awesome GUI")
    
    local mainTab = window:Tab("Main")
    mainTab:Button("Button", function()
        print("Button clicked!")
    end)
    
    mainTab:Toggle("Toggle", false, function(state)
        print("Toggle state:", state)
    end)
    
    mainTab:Dropdown("Dropdown", {"Option 1", "Option 2", "Option 3"}, function(selected)
        print("Selected:", selected)
    end)
    
    mainTab:Slider("Slider", 0, 100, 50, function(value)
        print("Slider value:", value)
    end)
]]

local Library = {}
Library.__index = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

function Library:CreateWindow(name)
    local screenGui = Instance.new("ScreenGui")
    local frame = Instance.new("Frame")
    local container = Instance.new("Frame")
    local uiListLayout = Instance.new("UIListLayout")
    local title = Instance.new("TextLabel")
    local resizeHandle = Instance.new("Frame")
    local tabContainer = Instance.new("Frame")
    local tabListLayout = Instance.new("UIListLayout")
    
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    screenGui.Name = "LibraryGui"
    screenGui.ResetOnSpawn = false
    
    -- Larger default size
    frame.Parent = screenGui
    frame.Size = UDim2.new(0, 350, 0, 450)
    frame.Position = UDim2.new(0.5, -175, 0.5, -225)
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 0
    frame.ClipsDescendants = true
    frame.Transparency = 1  -- Start transparent for load animation
    
    -- Add corner rounding
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    
    -- Add shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Parent = frame
    shadow.Size = UDim2.new(1, 0, 1, 0)
    shadow.Position = UDim2.new(0, 0, 0, 0)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.ZIndex = -1
    
    title.Parent = frame
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Text = name
    title.Font = Enum.Font.GothamSemibold
    title.TextSize = 16
    title.BorderSizePixel = 0
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = title
    
    -- Tab container
    tabContainer.Parent = frame
    tabContainer.Size = UDim2.new(1, -10, 0, 35)
    tabContainer.Position = UDim2.new(0, 5, 0, 40)
    tabContainer.BackgroundTransparency = 1
    
    tabListLayout.Parent = tabContainer
    tabListLayout.FillDirection = Enum.FillDirection.Horizontal
    tabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabListLayout.Padding = UDim.new(0, 5)
    
    container.Parent = frame
    container.Size = UDim2.new(1, -10, 1, -90)
    container.Position = UDim2.new(0, 5, 0, 80)
    container.BackgroundTransparency = 1
    container.ClipsDescendants = true
    
    uiListLayout.Parent = container
    uiListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    uiListLayout.Padding = UDim.new(0, 8)
    
    -- Resize handle
    resizeHandle.Parent = frame
    resizeHandle.Size = UDim2.new(0, 15, 0, 15)
    resizeHandle.Position = UDim2.new(1, -15, 1, -15)
    resizeHandle.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    resizeHandle.BorderSizePixel = 0
    
    local resizeCorner = Instance.new("UICorner")
    resizeCorner.CornerRadius = UDim.new(0, 4)
    resizeCorner.Parent = resizeHandle
    
    -- Mobile toggle button (top center of screen)
    local mobileToggle = Instance.new("TextButton")
    local mobileToggleCorner = Instance.new("UICorner")
    
    mobileToggle.Parent = screenGui
    mobileToggle.Size = UDim2.new(0, 120, 0, 40)
    mobileToggle.Position = UDim2.new(0.5, -60, 0, 10)
    mobileToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mobileToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    mobileToggle.Text = "Toggle GUI"
    mobileToggle.Font = Enum.Font.GothamSemibold
    mobileToggle.TextSize = 14
    mobileToggle.AutoButtonColor = false
    mobileToggle.ZIndex = 10
    
    mobileToggleCorner.CornerRadius = UDim.new(0, 8)
    mobileToggleCorner.Parent = mobileToggle
    
    -- Mobile button hover animation
    mobileToggle.MouseEnter:Connect(function()
        local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(mobileToggle, tweenInfo, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)})
        tween:Play()
    end)
    
    mobileToggle.MouseLeave:Connect(function()
        local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(mobileToggle, tweenInfo, {BackgroundColor3 = Color3.fromRGB(30, 30, 30)})
        tween:Play()
    end)
    
    mobileToggle.MouseButton1Click:Connect(function()
        frame.Visible = not frame.Visible
        mobileToggle.Text = frame.Visible and "Hide GUI" or "Show GUI"
    end)
    
    -- Hide keybind (Right Control)
    local hideKeybind = Enum.KeyCode.RightControl
    local inputConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == hideKeybind then
            frame.Visible = not frame.Visible
            mobileToggle.Text = frame.Visible and "Hide GUI" or "Show GUI"
        end
    end)
    
    -- Dragging functionality
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    title.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    -- Resizing functionality
    local resizing = false
    local resizeStart
    local startSize
    
    resizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = true
            resizeStart = input.Position
            startSize = frame.Size
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    resizing = false
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - resizeStart
            local newSize = UDim2.new(
                startSize.X.Scale, 
                math.max(300, startSize.X.Offset + delta.X),
                startSize.Y.Scale, 
                math.max(250, startSize.Y.Offset + delta.Y)
            )
            
            -- Animate resize
            local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(frame, tweenInfo, {Size = newSize})
            tween:Play()
        end
    end)
    
    local window = {
        container = container,
        mainFrame = frame,
        tabs = {},
        currentTab = nil,
        tabContainer = tabContainer,
        screenGui = screenGui,
        inputConnection = inputConnection  -- To update later
    }
    
    -- Watermark
    local watermark = Instance.new("TextLabel")
    watermark.Parent = screenGui
    watermark.Size = UDim2.new(0, 200, 0, 20)
    watermark.Position = UDim2.new(1, -210, 1, -30)
    watermark.BackgroundTransparency = 0.5
    watermark.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    watermark.TextColor3 = Color3.fromRGB(255, 255, 255)
    watermark.Text = name .. " | FPS: " .. math.floor(1 / game:GetService("RunService").RenderStepped:Wait())
    watermark.Font = Enum.Font.Gotham
    watermark.TextSize = 12
    watermark.Visible = true
    
    -- Update watermark FPS
    RunService.RenderStepped:Connect(function(delta)
        watermark.Text = name .. " | FPS: " .. math.floor(1 / delta)
    end)
    
    -- UI Sound Effects
    local soundEnabled = true
    local clickSound = Instance.new("Sound")
    clickSound.Parent = screenGui
    clickSound.SoundId = "rbxassetid://6027276128"  -- Click sound ID
    clickSound.Volume = 0.5
    
    local toggleSound = Instance.new("Sound")
    toggleSound.Parent = screenGui
    toggleSound.SoundId = "rbxassetid://6027276128"  -- Toggle sound ID
    toggleSound.Volume = 0.5
    
    -- Tab metatable
    local Tab = {}
    Tab.__index = Tab
    
    function Tab:Button(text, callback)
        local button = Instance.new("TextButton")
        local buttonCorner = Instance.new("UICorner")
        
        button.Size = UDim2.new(1, 0, 0, 35)
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Text = text
        button.Font = Enum.Font.Gotham
        button.TextSize = 14
        button.AutoButtonColor = false
        button.Parent = self.container
        
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = button
        
        -- Hover animation
        button.MouseEnter:Connect(function()
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(button, tweenInfo, {BackgroundColor3 = Color3.fromRGB(70, 70, 70)})
            tween:Play()
        end)
        
        button.MouseLeave:Connect(function()
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(button, tweenInfo, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
            tween:Play()
        end)
        
        -- Click animation
        button.MouseButton1Down:Connect(function()
            local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(button, tweenInfo, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)})
            tween:Play()
        end)
        
        button.MouseButton1Up:Connect(function()
            local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(button, tweenInfo, {BackgroundColor3 = Color3.fromRGB(70, 70, 70)})
            tween:Play()
            
            if soundEnabled then
                clickSound:Play()
            end
            
            callback()
        end)
    end
    
    function Tab:Toggle(text, default, callback)
        local toggle = Instance.new("TextButton")
        local toggleCorner = Instance.new("UICorner")
        local status = Instance.new("Frame")
        local statusCorner = Instance.new("UICorner")
        local innerDot = Instance.new("Frame")
        local innerCorner = Instance.new("UICorner")
        
        toggle.Size = UDim2.new(1, 0, 0, 35)
        toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        toggle.Text = ""
        toggle.AutoButtonColor = false
        toggle.Parent = self.container
        
        toggleCorner.CornerRadius = UDim.new(0, 6)
        toggleCorner.Parent = toggle
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.7, 0, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = toggle
        
        status.Size = UDim2.new(0, 45, 0, 20)
        status.Position = UDim2.new(0.85, -22, 0.5, -10)
        status.BackgroundColor3 = default and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(60, 60, 60)
        status.Parent = toggle
        
        statusCorner.CornerRadius = UDim.new(0, 10)
        statusCorner.Parent = status
        
        innerDot.Size = UDim2.new(0, 16, 0, 16)
        innerDot.Position = UDim2.new(default and 0.6 or 0.1, 0, 0.1, 0)
        innerDot.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        innerDot.Parent = status
        
        innerCorner.CornerRadius = UDim.new(0, 8)
        innerCorner.Parent = innerDot
        
        local current = default
        
        -- Hover animation
        toggle.MouseEnter:Connect(function()
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(toggle, tweenInfo, {BackgroundColor3 = Color3.fromRGB(70, 70, 70)})
            tween:Play()
        end)
        
        toggle.MouseLeave:Connect(function()
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(toggle, tweenInfo, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
            tween:Play()
        end)
        
        toggle.MouseButton1Click:Connect(function()
            current = not current
            
            -- Animate toggle
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local bgTween = TweenService:Create(status, tweenInfo, {
                BackgroundColor3 = current and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(60, 60, 60)
            })
            local dotTween = TweenService:Create(innerDot, tweenInfo, {
                Position = UDim2.new(current and 0.6 or 0.1, 0, 0.1, 0)
            })
            
            bgTween:Play()
            dotTween:Play()
            
            if soundEnabled then
                toggleSound:Play()
            end
            
            callback(current)
        end)
    end
    
    function Tab:Dropdown(text, options, callback)
        local dropdown = Instance.new("TextButton")
        local dropdownCorner = Instance.new("UICorner")
        local arrow = Instance.new("ImageLabel")
        
        dropdown.Size = UDim2.new(1, 0, 0, 35)
        dropdown.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
        dropdown.Text = "  " .. text
        dropdown.Font = Enum.Font.Gotham
        dropdown.TextSize = 14
        dropdown.TextXAlignment = Enum.TextXAlignment.Left
        dropdown.AutoButtonColor = false
        dropdown.Parent = self.container
        
        dropdownCorner.CornerRadius = UDim.new(0, 6)
        dropdownCorner.Parent = dropdown
        
        arrow.Size = UDim2.new(0, 20, 0, 20)
        arrow.Position = UDim2.new(0.9, -10, 0.5, -10)
        arrow.BackgroundTransparency = 1
        arrow.Image = "rbxassetid://6031094667"
        arrow.ImageColor3 = Color3.fromRGB(200, 200, 200)
        arrow.Parent = dropdown
        
        -- Create dropdown container (parent to screenGui to avoid clipping)
        local dropdownContainer = Instance.new("Frame")
        local containerCorner = Instance.new("UICorner")
        local containerLayout = Instance.new("UIListLayout")
        local containerShadow = Instance.new("ImageLabel")
        
        dropdownContainer.Size = UDim2.new(0, 0, 0, 0)
        dropdownContainer.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        dropdownContainer.BorderSizePixel = 0
        dropdownContainer.ClipsDescendants = true
        dropdownContainer.Visible = false
        dropdownContainer.ZIndex = 5
        dropdownContainer.Parent = window.screenGui
        
        containerCorner.CornerRadius = UDim.new(0, 6)
        containerCorner.Parent = dropdownContainer
        
        containerLayout.Parent = dropdownContainer
        containerLayout.SortOrder = Enum.SortOrder.LayoutOrder
        
        containerShadow.Parent = dropdownContainer
        containerShadow.Size = UDim2.new(1, 0, 1, 0)
        containerShadow.BackgroundTransparency = 1
        containerShadow.Image = "rbxassetid://1316045217"
        containerShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        containerShadow.ImageTransparency = 0.8
        containerShadow.ScaleType = Enum.ScaleType.Slice
        containerShadow.SliceCenter = Rect.new(10, 10, 118, 118)
        containerShadow.ZIndex = 4
        
        local open = false
        local connection
        
        -- Function to update position and size
        local function updateDropdownPosition()
            local width = dropdown.AbsoluteSize.X
            if width == 0 then
                width = 200
            end
            local height = #options * 30
            dropdownContainer.Position = UDim2.new(0, window.mainFrame.AbsolutePosition.X + window.mainFrame.AbsoluteSize.X + 5, 0, dropdown.AbsolutePosition.Y)
            dropdownContainer.Size = UDim2.new(0, width, 0, height)
        end
        
        -- Create option buttons
        for i, option in ipairs(options) do
            local optionButton = Instance.new("TextButton")
            local optionCorner = Instance.new("UICorner")
            
            optionButton.Size = UDim2.new(1, 0, 0, 30)
            optionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            optionButton.Text = "  " .. option
            optionButton.Font = Enum.Font.Gotham
            optionButton.TextSize = 14
            optionButton.TextXAlignment = Enum.TextXAlignment.Left
            optionButton.AutoButtonColor = false
            optionButton.ZIndex = 6
            optionButton.Parent = dropdownContainer
            
            optionCorner.CornerRadius = UDim.new(0, 4)
            optionCorner.Parent = optionButton
            
            -- Option hover animation
            optionButton.MouseEnter:Connect(function()
                local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local tween = TweenService:Create(optionButton, tweenInfo, {BackgroundColor3 = Color3.fromRGB(70, 70, 70)})
                tween:Play()
            end)
            
            optionButton.MouseLeave:Connect(function()
                local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local tween = TweenService:Create(optionButton, tweenInfo, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)})
                tween:Play()
            end)
            
            optionButton.MouseButton1Click:Connect(function()
                callback(option)
                dropdown.Text = "  " .. text .. " : " .. option
                
                -- Close dropdown with animation
                local closeTween = TweenService:Create(dropdownContainer, TweenInfo.new(0.2), {
                    Size = UDim2.new(dropdownContainer.Size.X, 0, 0, 0)
                })
                closeTween:Play()
                
                closeTween.Completed:Connect(function()
                    dropdownContainer.Visible = false
                end)
                
                open = false
                
                -- Rotate arrow back
                local arrowTween = TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0})
                arrowTween:Play()
                
                if connection then
                    connection:Disconnect()
                    connection = nil
                end
                
                if soundEnabled then
                    clickSound:Play()
                end
            end)
        end
        
        -- Hover animation for dropdown
        dropdown.MouseEnter:Connect(function()
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(dropdown, tweenInfo, {BackgroundColor3 = Color3.fromRGB(70, 70, 70)})
            tween:Play()
        end)
        
        dropdown.MouseLeave:Connect(function()
            if not open then
                local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local tween = TweenService:Create(dropdown, tweenInfo, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
                tween:Play()
            end
        end)
        
        dropdown.MouseButton1Click:Connect(function()
            open = not open
            
            if open then
                updateDropdownPosition()
                dropdownContainer.Visible = true
                
                -- Animate opening
                local openTween = TweenService:Create(dropdownContainer, TweenInfo.new(0.2), {
                    Size = dropdownContainer.Size  -- Already set to full size
                })
                openTween:Play()
                
                -- Rotate arrow
                local arrowTween = TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 180})
                arrowTween:Play()
                
                -- Start updating position
                connection = RunService.Heartbeat:Connect(updateDropdownPosition)
            else
                -- Animate closing
                local closeTween = TweenService:Create(dropdownContainer, TweenInfo.new(0.2), {
                    Size = UDim2.new(dropdownContainer.Size.X, 0, 0, 0)
                })
                closeTween:Play()
                
                closeTween.Completed:Connect(function()
                    dropdownContainer.Visible = false
                end)
                
                -- Rotate arrow back
                local arrowTween = TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0})
                arrowTween:Play()
                
                if connection then
                    connection:Disconnect()
                    connection = nil
                end
            end
            
            if soundEnabled then
                clickSound:Play()
            end
        end)
        
        -- Close dropdown when clicking outside
        local function closeDropdown(input)
            if open and input.UserInputType == Enum.UserInputType.MouseButton1 then
                local mousePos = UserInputService:GetMouseLocation()
                local ddPos = dropdownContainer.AbsolutePosition
                local ddSize = dropdownContainer.AbsoluteSize
                local isInDD = mousePos.X >= ddPos.X and mousePos.X <= ddPos.X + ddSize.X and mousePos.Y >= ddPos.Y and mousePos.Y <= ddPos.Y + ddSize.Y
                
                local dPos = dropdown.AbsolutePosition
                local dSize = dropdown.AbsoluteSize
                local isInD = mousePos.X >= dPos.X and mousePos.X <= dPos.X + dSize.X and mousePos.Y >= dPos.Y and mousePos.Y <= dPos.Y + dSize.Y
                
                local isInDropdown = isInDD or isInD
                if not isInDropdown then
                    open = false
                    local closeTween = TweenService:Create(dropdownContainer, TweenInfo.new(0.2), {
                        Size = UDim2.new(dropdownContainer.Size.X, 0, 0, 0)
                    })
                    closeTween:Play()
                    
                    closeTween.Completed:Connect(function()
                        dropdownContainer.Visible = false
                    end)
                    
                    local arrowTween = TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0})
                    arrowTween:Play()
                    
                    if connection then
                        connection:Disconnect()
                        connection = nil
                    end
                end
            end
        end
        
        UserInputService.InputBegan:Connect(closeDropdown)
    end
    
    function Tab:Slider(text, min, max, default, callback)
        local slider = Instance.new("Frame")
        local track = Instance.new("Frame")
        local trackCorner = Instance.new("UICorner")
        local fill = Instance.new("Frame")
        local fillCorner = Instance.new("UICorner")
        local handle = Instance.new("TextButton")
        local handleCorner = Instance.new("UICorner")
        local valueLabel = Instance.new("TextLabel")
        
        slider.Size = UDim2.new(1, 0, 0, 60)
        slider.BackgroundTransparency = 1
        slider.Parent = self.container
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0, 20)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = slider
        
        track.Size = UDim2.new(1, 0, 0, 6)
        track.Position = UDim2.new(0, 0, 0, 35)
        track.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        track.Parent = slider
        
        trackCorner.CornerRadius = UDim.new(0, 3)
        trackCorner.Parent = track
        
        fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        fill.BackgroundColor3 = Color3.fromRGB(0, 120, 255)
        fill.Parent = track
        
        fillCorner.CornerRadius = UDim.new(0, 3)
        fillCorner.Parent = fill
        
        handle.Size = UDim2.new(0, 20, 0, 20)
        handle.Position = UDim2.new((default - min) / (max - min), -10, 0.5, -10)
        handle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        handle.Text = ""
        handle.AutoButtonColor = false
        handle.Parent = slider
        
        handleCorner.CornerRadius = UDim.new(0, 10)
        handleCorner.Parent = handle
        
        valueLabel.Size = UDim2.new(0, 50, 0, 20)
        valueLabel.Position = UDim2.new(1, -50, 0, 0)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Text = tostring(default)
        valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        valueLabel.Font = Enum.Font.Gotham
        valueLabel.TextSize = 14
        valueLabel.Parent = slider
        
        local dragging = false
        
        local function update(value)
            value = math.clamp(value, min, max)
            local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            
            local fillTween = TweenService:Create(fill, tweenInfo, {
                Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
            })
            local handleTween = TweenService:Create(handle, tweenInfo, {
                Position = UDim2.new((value - min) / (max - min), -10, 0.5, -10)
            })
            
            fillTween:Play()
            handleTween:Play()
            
            valueLabel.Text = tostring(math.floor(value))
            callback(value)
            
            if soundEnabled then
                clickSound:Play()
            end
        end
        
        handle.MouseButton1Down:Connect(function()
            dragging = true
            
            -- Animate handle scale on click
            local scaleTween = TweenService:Create(handle, TweenInfo.new(0.1), {
                Size = UDim2.new(0, 24, 0, 24)
            })
            scaleTween:Play()
        end)
        
        game:GetService("UserInputService").InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                if dragging then
                    -- Animate handle scale back
                    local scaleTween = TweenService:Create(handle, TweenInfo.new(0.1), {
                        Size = UDim2.new(0, 20, 0, 20)
                    })
                    scaleTween:Play()
                end
                dragging = false
            end
        end)
        
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local relativeX = math.clamp((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
                update(min + (max - min) * relativeX)
            end
        end)
        
        -- Also allow clicking on track to set value
        track.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                local relativeX = math.clamp((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
                update(min + (max - min) * relativeX)
            end
        end)
    end
    
    function window:Tab(name)
        -- Check if tab already exists
        for _, existingTab in ipairs(self.tabs) do
            if existingTab.name == name then
                return existingTab
            end
        end
        
        local tabButton = Instance.new("TextButton")
        local tabCorner = Instance.new("UICorner")
        local tabContainer = Instance.new("ScrollingFrame")
        local tabLayout = Instance.new("UIListLayout")
        
        -- Create tab button
        tabButton.Size = UDim2.new(0, 80, 0, 30)
        tabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabButton.Text = name
        tabButton.Font = Enum.Font.Gotham
        tabButton.TextSize = 14
        tabButton.AutoButtonColor = false
        tabButton.Parent = self.tabContainer
        
        tabCorner.CornerRadius = UDim.new(0, 6)
        tabCorner.Parent = tabButton
        
        -- Create tab container
        tabContainer.Size = UDim2.new(1, 0, 1, 0)
        tabContainer.BackgroundTransparency = 1
        tabContainer.BorderSizePixel = 0
        tabContainer.ScrollBarThickness = 4
        tabContainer.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
        tabContainer.Visible = false
        tabContainer.Parent = self.container
        
        tabLayout.Parent = tabContainer
        tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabLayout.Padding = UDim.new(0, 8)
        
        -- Create tab object
        local tab = setmetatable({
            name = name,
            container = tabContainer,
            button = tabButton,
            isActive = false
        }, Tab)
        
        -- Tab switching logic
        tabButton.MouseButton1Click:Connect(function()
            self:SwitchTab(tab)
            if soundEnabled then
                clickSound:Play()
            end
        end)
        
        -- Add to window tabs
        table.insert(self.tabs, tab)
        
        -- If this is the first tab, make it active
        if #self.tabs == 1 then
            self:SwitchTab(tab)
        end
        
        return tab
    end
    
    function window:SwitchTab(tab)
        -- Deactivate all tabs
        for _, otherTab in ipairs(self.tabs) do
            otherTab.container.Visible = false
            otherTab.isActive = false
            
            -- Animate tab button deactivation
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(otherTab.button, tweenInfo, {
                BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            })
            tween:Play()
        end
        
        -- Activate selected tab
        tab.container.Visible = true
        tab.isActive = true
        
        -- Animate tab button activation
        local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(tab.button, tweenInfo, {
            BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        })
        tween:Play()
        
        self.currentTab = tab
    end
    
    -- Create built-in settings tab (only if it doesn't exist)
    local settingsTab = window:Tab("Settings")
    
    -- Add settings options
    settingsTab:Button("Hide GUI", function()
        frame.Visible = not frame.Visible
        mobileToggle.Text = frame.Visible and "Hide GUI" or "Show GUI"
    end)
    
    settingsTab:Button("Destroy GUI", function()
        screenGui:Destroy()
    end)
    
    settingsTab:Toggle("Watermark", true, function(state)
        watermark.Visible = state
    end)
    
    settingsTab:Toggle("UI Sound Effects", true, function(state)
        soundEnabled = state
    end)
    
    -- Keybind changer as TextBox with key press detection
    do
        local keybindFrame = Instance.new("Frame")
        local keybindLabel = Instance.new("TextLabel")
        local keybindButton = Instance.new("TextButton")
        local keybindCorner = Instance.new("UICorner")
        
        keybindFrame.Size = UDim2.new(1, 0, 0, 35)
        keybindFrame.BackgroundTransparency = 1
        keybindFrame.Parent = settingsTab.container
        
        keybindLabel.Size = UDim2.new(0.5, 0, 1, 0)
        keybindLabel.BackgroundTransparency = 1
        keybindLabel.Text = "Hide Keybind:"
        keybindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        keybindLabel.Font = Enum.Font.Gotham
        keybindLabel.TextSize = 14
        keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
        keybindLabel.Parent = keybindFrame
        
        keybindButton.Size = UDim2.new(0.5, 0, 1, 0)
        keybindButton.Position = UDim2.new(0.5, 0, 0, 0)
        keybindButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        keybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        keybindButton.Text = "RightControl"
        keybindButton.Font = Enum.Font.Gotham
        keybindButton.TextSize = 14
        keybindButton.AutoButtonColor = false
        keybindButton.Parent = keybindFrame
        
        keybindCorner.CornerRadius = UDim.new(0, 6)
        keybindCorner.Parent = keybindButton
        
        local listening = false
        keybindButton.MouseButton1Click:Connect(function()
            listening = true
            keybindButton.Text = "Press a key..."
        end)
        
        local keyConnection
        keyConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if listening and not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
                hideKeybind = input.KeyCode
                keybindButton.Text = input.KeyCode.Name
                listening = false
                
                -- Update the input connection
                window.inputConnection:Disconnect()
                window.inputConnection = UserInputService.InputBegan:Connect(function(newInput, newGameProcessed)
                    if not newGameProcessed and newInput.KeyCode == hideKeybind then
                        frame.Visible = not frame.Visible
                        mobileToggle.Text = frame.Visible and "Hide GUI" or "Show GUI"
                    end
                end)
            end
        end)
    end
    
    -- Load up animation
    local loadTween = TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Transparency = 0
    })
    loadTween:Play()
    
    return window
end

return Library
